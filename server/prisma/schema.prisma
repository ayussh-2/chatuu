datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

model User {
  id            Int            @id @default(autoincrement())
  username      String         @unique
  email         String         @unique
  password      String
  profilePicture String?       
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  messages      Message[]
  participants  Participant[]
  readReceipts  ReadReceipt[]
  sentRequests     FriendRequest[] @relation("Sender")
  receivedRequests FriendRequest[] @relation("Receiver")
}

model FriendRequest {
  id        Int      @id @default(autoincrement())
  senderId  Int
  receiverId Int
  status    FriendRequestStatus @default(PENDING)
  sentAt    DateTime @default(now())
  updatedAt DateTime @updatedAt
  sender    User     @relation("Sender", fields: [senderId], references: [id], onDelete: Cascade)
  receiver  User     @relation("Receiver", fields: [receiverId], references: [id], onDelete: Cascade)

  @@unique([senderId, receiverId])
}

enum FriendRequestStatus {
  PENDING
  ACCEPTED
  REJECTED
  CANCELED
}

model Conversation {
  id           Int           @id @default(autoincrement())
  isGroup      Boolean       @default(false)
  name         String?
  description  String?       
  avatarUrl    String?      
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  participants Participant[]
  messages     Message[]
  lastMessageId Int?          @unique
  lastMessage  Message?      @relation("LastMessage", fields: [lastMessageId], references: [id])
}

model Participant {
  id             Int          @id @default(autoincrement())
  userId         Int
  conversationId Int
  joinedAt       DateTime     @default(now())
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  @@unique([userId, conversationId])
}

model Message {
  id             Int           @id @default(autoincrement())
  content        String
  createdAt      DateTime      @default(now())
  editedAt       DateTime?     
  senderId       Int
  conversationId Int
  isDeleted      Boolean       @default(false)
  sender         User          @relation(fields: [senderId], references: [id], onDelete: Cascade)
  conversation   Conversation  @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  readReceipts   ReadReceipt[]
  lastMessageFor Conversation? @relation("LastMessage")
}

model ReadReceipt {
  id        Int      @id @default(autoincrement())
  messageId Int
  userId    Int
  readAt    DateTime @default(now())
  message   Message  @relation(fields: [messageId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([messageId, userId])
}